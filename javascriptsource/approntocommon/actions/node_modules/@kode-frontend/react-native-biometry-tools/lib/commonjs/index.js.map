{"version":3,"sources":["index.tsx"],"names":["BiometryType","BiometryErrorCode","BiometryTools","NativeModules"],"mappings":";;;;;;;AAAA;;IAEYA,Y;;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,4BAAAA,Y;;IAuBAC,iB;;;WAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,iCAAAA,iB;;AAkCZ,MAAM;AAAEC,EAAAA;AAAF,IAAoBC,0BAA1B;eAEeD,a","sourcesContent":["import { NativeModules } from 'react-native';\n\nexport enum BiometryType {\n  /**\n   * ios only\n   */ \n  FACE_ID = 'Face ID',\n  /**\n   * ios only\n   */ \n  TOUCH_ID = 'Touch ID',\n  /**\n   * android only\n   */ \n  FINGERPRINT = 'Fingerprint',\n  /**\n   * android only\n   */ \n  FACE = 'Face',\n  /**\n   * android only\n   */ \n  IRIS = 'Iris'\n}\n\nexport enum BiometryErrorCode {\n  NOT_ENROLLED = 'BiometryScannerNotEnrolled',\n  NOT_SUPPORTED = 'BiometryScannerNotSupported',\n  /**\n   * ios only\n   */ \n  NOT_AVAILABLE = 'BiometryScannerNotAvailable',\n  /**\n   * ios only\n   */ \n  PASSCODE_NOT_SET = 'PasscodeNotSet',\n  /**\n   * ios only\n   */ \n  DEVICE_LOCKED_PERMANENT = 'DeviceLockedPermanent'\n}\n\ntype TBiometryTools = {\n  /**\n   * Promise return supported biometry type if biometry is available/supported\n   * else it throws an exception\n   */\n  isSensorAvailable: () => Promise<BiometryType>;\n   /**\n   * Promise return supported biometry type if biometry is supported\n   * else it returns null\n   */\n  getSupportedBiometryType: () => Promise<BiometryType | null>\n};\n\nexport interface BiometryAvailableError extends Error {\n  code: BiometryErrorCode\n}\n\nconst { BiometryTools } = NativeModules;\n\nexport default BiometryTools as TBiometryTools;\n"]}