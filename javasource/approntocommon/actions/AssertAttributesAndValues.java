// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package approntocommon.actions;

import java.math.BigDecimal;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;

/**
 * Compare 2 object where attributes must have the same value(associations are only checked if it's present) (need Unit Test module). Will throw an exception with the details about the mismatch.
 */
public class AssertAttributesAndValues extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject Expected;
	private IMendixObject Actual;

	public AssertAttributesAndValues(IContext context, IMendixObject Expected, IMendixObject Actual)
	{
		super(context);
		this.Expected = Expected;
		this.Actual = Actual;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		if (Expected == null)
			throw new IllegalStateException("source is null");
		if (Actual == null)
			throw new IllegalStateException("target is null");
		
		for(IMetaPrimitive e : Expected.getMetaObject().getMetaPrimitives()) {
			if ( e.isVirtual() ) { continue; }
			if (Actual.getValue(getContext(), e.getName()) == null && Expected.getValue(getContext(), e.getName()) == null){ continue;}
			
			if (!Actual.hasMember(e.getName())) {
				throw new Exception("Attribute of "+e.getName() + " is not present in Actual: " + Expected.getMetaObject().getName());
			}
			
			switch(e.getType()) {
				case AutoNumber:
				case Binary:
				case HashString:
					break;
				case Decimal:
					if ( !(((BigDecimal) Expected.getValue(getContext(), e.getName())).compareTo( (BigDecimal)Actual.getValue(getContext(), e.getName())) == 0)) {
						throw new Exception("Decimal Value of "+ Expected.getMetaObject().getName() + " / " + e.getName() + " is not equal; was \""+ Actual.getValue(getContext(), e.getName()) +"\" expected \"" + Expected.getValue(getContext(), e.getName())+"\"" );
					}
					break;
				default:
					if ( 	(Expected.getValue(getContext(), e.getName()) != null && Actual.getValue(getContext(), e.getName()) == null) 
							|| (Expected.getValue(getContext(), e.getName()) == null && Actual.getValue(getContext(), e.getName()) != null) 
							||   !Expected.getValue(getContext(), e.getName()).equals(Actual.getValue(getContext(), e.getName())) ) {
						throw new Exception("Value of "+ Expected.getMetaObject().getName() + " / " + e.getName() + " is not equal; was \""+ Actual.getValue(getContext(), e.getName()) +"\" expected \"" + Expected.getValue(getContext(), e.getName())+"\"" );
					}
					break;
			}	
		}
		
		for(IMetaAssociation e : Expected.getMetaObject().getMetaAssociationsChild()) {
			if(Actual.getMetaObject().getMetaAssociationChild(e.getName()) == null) {
				throw new Exception("Child association of "+e.getName() + " is not present in Actual: " + Expected.getMetaObject().getName());
			}
			if ( 	(Expected.getValue(getContext(), e.getName()) != null && Actual.getValue(getContext(), e.getName()) == null) 
					|| (Expected.getValue(getContext(), e.getName()) == null && Actual.getValue(getContext(), e.getName()) != null)
				){
				throw new Exception("Value of "+ Expected.getMetaObject().getName() + " / " + e.getName() + " is not equal; was \""+ Actual.getValue(getContext(), e.getName()) +"\" expected \"" + Expected.getValue(getContext(), e.getName())+"\"" );
			}
		}
		
		for(IMetaAssociation e : Expected.getMetaObject().getMetaAssociationsParent()) {
			if(Actual.getMetaObject().getMetaAssociationParent(e.getName()) == null) {
				throw new Exception("Parent association of "+e.getName() + " is not present in Actual: " + Expected.getMetaObject().getName());
			}
			if ( 	(Expected.getValue(getContext(), e.getName()) != null && Actual.getValue(getContext(), e.getName()) == null) 
					|| (Expected.getValue(getContext(), e.getName()) == null && Actual.getValue(getContext(), e.getName()) != null) 
				) {
				throw new Exception("Value of "+ Expected.getMetaObject().getName() + " / " + e.getName() + " is not equal; was \""+ Actual.getValue(getContext(), e.getName()) +"\" expected \"" + Expected.getValue(getContext(), e.getName())+"\"" );
			}
		}
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AssertAttributesAndValues";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
