// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package approntocommon.actions;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import javax.imageio.ImageIO;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.UserAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class CropImage extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __cropImgObj;
	private system.proxies.Image cropImgObj;
	private java.lang.Long newWidth;
	private java.lang.Long thumbnailWidth;

	public CropImage(IContext context, IMendixObject cropImgObj, java.lang.Long newWidth, java.lang.Long thumbnailWidth)
	{
		super(context);
		this.__cropImgObj = cropImgObj;
		this.newWidth = newWidth;
		this.thumbnailWidth = thumbnailWidth;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.cropImgObj = __cropImgObj == null ? null : system.proxies.Image.initialize(getContext(), __cropImgObj);

		// BEGIN USER CODE
		InputStream is = Core.getImage(getContext(), cropImgObj.getMendixObject(), false);
		BufferedImage img = ImageIO.read(is);
		
		int cropWidth = newWidth.intValue();
		
		if(cropWidth > img.getWidth()) 
			cropWidth = img.getWidth();
		
		Float tmp = Float.valueOf(cropWidth) * Float.valueOf(img.getHeight()) / Float.valueOf(img.getWidth());
		int	cropHeight =  tmp.intValue();
		Float tmp2 = Float.valueOf(this.thumbnailWidth) / Float.valueOf(cropWidth) * Float.valueOf(cropHeight);
		Long thumbnailHeight = tmp2.longValue();
		
		int sx1, sx2, sy1, sy2, dx1, dx2, dy1, dy2;
		
		//Source is smaller than target image? Do not upscale, just center
		if (img.getWidth() < cropWidth || img.getHeight() < cropHeight) {
			sx1 = 0; 
			sy1 = 0;
			sx2 = img.getWidth();
			sy2 = img.getHeight();
			
			//draw in center
			dx1 = (cropWidth - img.getWidth()) / 2;
			dx2 = dx1 + img.getWidth();
			dy1 = (cropHeight - img.getHeight()) / 2;
			dy2 = dy1 + img.getHeight();
		}
		
		else {
			double resizeFactor = Math.max((float)img.getWidth() / cropWidth, (float)img.getHeight() / cropHeight);
			
			sx1 = 0; 
			sy1 = 0;
			sx2 = img.getWidth();
			sy2 = img.getHeight();
			
			dx1 = (int) ((cropWidth - (img.getWidth() / resizeFactor)) / 2);
			dx2 = (int) ((img.getWidth() / resizeFactor) + dx1);
			dy1 = (int) ((cropHeight - (img.getHeight() / resizeFactor)) / 2);
			dy2 = (int) ((img.getHeight() / resizeFactor) + dy1);
		}

		BufferedImage dstImage = new BufferedImage(cropWidth, cropHeight, BufferedImage.TYPE_INT_RGB);
		dstImage.getGraphics().drawImage(img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2, null);

		ByteArrayOutputStream os = new ByteArrayOutputStream();
		ImageIO.write(dstImage, "jpeg", os);
		InputStream stream = new ByteArrayInputStream(os.toByteArray());
		Core.storeImageDocumentContent(getContext(), cropImgObj.getMendixObject(), stream, thumbnailWidth.intValue(), thumbnailHeight.intValue());
		return true;		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CropImage";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
