// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package approntocommon.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import java.math.BigDecimal;

public class HaversineCheck extends CustomJavaAction<java.math.BigDecimal>
{
	private java.math.BigDecimal Geo1Latitude;
	private java.math.BigDecimal Geo1Longitude;
	private java.math.BigDecimal Geo2Latitude;
	private java.math.BigDecimal Geo2Longitude;

	public HaversineCheck(IContext context, java.math.BigDecimal Geo1Latitude, java.math.BigDecimal Geo1Longitude, java.math.BigDecimal Geo2Latitude, java.math.BigDecimal Geo2Longitude)
	{
		super(context);
		this.Geo1Latitude = Geo1Latitude;
		this.Geo1Longitude = Geo1Longitude;
		this.Geo2Latitude = Geo2Latitude;
		this.Geo2Longitude = Geo2Longitude;
	}

	@java.lang.Override
	public java.math.BigDecimal executeAction() throws Exception
	{
		// BEGIN USER CODE
		return new BigDecimal(distance(Geo1Latitude.doubleValue(), Geo1Longitude.doubleValue(), Geo2Latitude.doubleValue(), Geo2Longitude.doubleValue()));
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "HaversineCheck";
	}

	// BEGIN EXTRA CODE
	private static final int EARTH_RADIUS = 6371; // Approx Earth radius in KM

	private static double distance(double startLat, double startLong,
                                  double endLat, double endLong) {

        double dLat  = Math.toRadians((endLat - startLat));
        double dLong = Math.toRadians((endLong - startLong));

        startLat = Math.toRadians(startLat);
        endLat   = Math.toRadians(endLat);

        double a = haversin(dLat) + Math.cos(startLat) * Math.cos(endLat) * haversin(dLong);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return EARTH_RADIUS * c; // <-- d
    }

	private static double haversin(double val) {
        return Math.pow(Math.sin(val / 2), 2);
    }
	// END EXTRA CODE
}
