// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package approntocommon.actions;

import java.io.IOException;
import java.net.URISyntaxException;
import java.text.ParseException;
import net.fortuna.ical4j.model.Calendar;
import net.fortuna.ical4j.model.DateTime;
import net.fortuna.ical4j.model.TimeZone;
import net.fortuna.ical4j.model.TimeZoneRegistry;
import net.fortuna.ical4j.model.TimeZoneRegistryFactory;
import net.fortuna.ical4j.model.component.VEvent;
import net.fortuna.ical4j.model.property.Organizer;
import net.fortuna.ical4j.model.property.CalScale;
import net.fortuna.ical4j.model.property.Description;
import net.fortuna.ical4j.model.property.Location;
import net.fortuna.ical4j.model.property.Method;
import net.fortuna.ical4j.model.property.Uid;
import net.fortuna.ical4j.model.property.ProdId;
import net.fortuna.ical4j.model.property.Version;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class CreateICS extends CustomJavaAction<java.lang.String>
{
	private java.lang.String UID;
	private approntocommon.proxies.NotificationType VCalendarType;
	private java.util.Date StartDateTime;
	private java.util.Date EndDateTime;
	private java.lang.String Subject;
	private java.lang.String BodyText;
	private java.lang.String Location;
	private java.lang.String TimeZoneID;
	private java.lang.String Organizer;

	public CreateICS(IContext context, java.lang.String UID, java.lang.String VCalendarType, java.util.Date StartDateTime, java.util.Date EndDateTime, java.lang.String Subject, java.lang.String BodyText, java.lang.String Location, java.lang.String TimeZoneID, java.lang.String Organizer)
	{
		super(context);
		this.UID = UID;
		this.VCalendarType = VCalendarType == null ? null : approntocommon.proxies.NotificationType.valueOf(VCalendarType);
		this.StartDateTime = StartDateTime;
		this.EndDateTime = EndDateTime;
		this.Subject = Subject;
		this.BodyText = BodyText;
		this.Location = Location;
		this.TimeZoneID = TimeZoneID;
		this.Organizer = Organizer;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		Calendar calendar = this.createCalendar( );

		return calendar.toString();
		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CreateICS";
	}

	// BEGIN EXTRA CODE
	
	private Calendar createCalendar( ) throws IOException, URISyntaxException, ParseException{
		if (this.StartDateTime == null) {
			throw new IllegalArgumentException("StartDateTime is mandatory");
		}
		if (this.EndDateTime == null) {
			throw new IllegalArgumentException("EndDateTime is mandatory");
		}
		if (this.TimeZoneID == null) {
			this.TimeZoneID = "Europe/Amsterdam";
		}
		if (this.Organizer == null) {
			this.Organizer = "";
		}
		Calendar calendar = new Calendar( );
		
		calendar.getProperties( ).add( 
			this.VCalendarType == null ? Method.PUBLISH 
			: this.VCalendarType.toString( ).equalsIgnoreCase( "create" ) ? Method.REQUEST
			: this.VCalendarType.toString( ).equalsIgnoreCase( "update" ) ? Method.REQUEST
			: this.VCalendarType.toString( ).equalsIgnoreCase( "publish" ) ? Method.PUBLISH
			: this.VCalendarType.toString( ).equalsIgnoreCase( "cancel" ) ? Method.CANCEL
			: Method.CANCEL			
		);
		calendar.getProperties( ).add( new ProdId( "-//Mendix//iCal4j 1.0.6" ) );
		calendar.getProperties( ).add( Version.VERSION_2_0 );
		calendar.getProperties( ).add( CalScale.GREGORIAN );
		
		TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry();
		TimeZone tz = registry.getTimeZone(this.TimeZoneID);
		calendar.getComponents( ).add( tz.getVTimeZone() );
		DateTime start = new DateTime(this.StartDateTime);
		start.setTimeZone(tz);
		DateTime end = new DateTime(this.EndDateTime);
		end.setTimeZone(tz);
		VEvent event = new VEvent( start, end, this.Subject );

		event.getProperties( ).add( new Description( this.BodyText ) );
		event.getProperties( ).add( new Uid( this.UID) );
		event.getProperties( ).add( new Location( this.Location ) );		
		event.getProperties( ).add( new Organizer( this.Organizer) );
		calendar.getComponents( ).add( event );
		
		return calendar;
	}
	
	// END EXTRA CODE
}
