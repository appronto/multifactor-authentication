// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package approntocommon.actions;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class ExecuteUnverifiedMicroflowSynchronized extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String MicroflowName;
	private IMendixObject Param;
	private java.lang.String ParamName;
	private IMendixObject Param2;
	private java.lang.String ParamName2;

	public ExecuteUnverifiedMicroflowSynchronized(IContext context, java.lang.String MicroflowName, IMendixObject Param, java.lang.String ParamName, IMendixObject Param2, java.lang.String ParamName2)
	{
		super(context);
		this.MicroflowName = MicroflowName;
		this.Param = Param;
		this.ParamName = ParamName;
		this.Param2 = Param2;
		this.ParamName2 = ParamName2;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		Map<String,Object> params = new HashMap<String, Object>();
		params.put(this.ParamName, this.Param);
		if ( this.Param2 != null && this.ParamName2 != null) 
		{
			params.put(this.ParamName2, this.Param2);
		}
		executeMFSync(this.getContext(), params, this.MicroflowName);
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteUnverifiedMicroflowSynchronized";
	}

	// BEGIN EXTRA CODE
	public static synchronized void executeMFSync (IContext context, Map<String,Object> params, String mfNAme) throws CoreException{
		IContext newContext= context.getSession().createContext();
		newContext.startTransaction();
		Core.microflowCall(mfNAme)
		.withParams(params)
		.execute(newContext);
		newContext.endTransaction();
	}
	// END EXTRA CODE
}
