// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package approntocommon.actions;

import java.io.ByteArrayOutputStream;
import java.security.MessageDigest;
import java.util.Base64;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * This creates a PasswordDigest for WS Security UsernameToken authentication.
 * 
 * Password_Digest = Base64 ( SHA-1 ( nonce + created + password ) )
 * 
 * Nonce is a base64 encoded string.
 * 
 * Created is a string representation of a timestamp (usually UTC). 
 * Format example: 2021-06-21T12:43:21.791Z 
 * 
 * Password is just a regular string.
 */
public class CreatePasswordDigest extends CustomJavaAction<java.lang.String>
{
	private java.lang.String Nonce;
	private java.lang.String Created;
	private java.lang.String Password;

	public CreatePasswordDigest(IContext context, java.lang.String Nonce, java.lang.String Created, java.lang.String Password)
	{
		super(context);
		this.Nonce = Nonce;
		this.Created = Created;
		this.Password = Password;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		  try {
		        String passwordStr = this.Password;
				// The nonce is a Base64 encoded string!
		        String nonceStr = this.Nonce;
		        String createdStr = this.Created;
		        
		        //Convert nonce string to byte array.
		        byte[] nonceBytes = Base64.getDecoder().decode(nonceStr);
		        
		        //Convert created string to byte array.
		        byte[] createdDateBytes = createdStr.getBytes("UTF-8");
		        
		        //Convert password string to byte array.
		        byte[] passwordBytes = passwordStr.getBytes("UTF-8");
		        
		        //SHA-1 hash the bunch of it.
		        ByteArrayOutputStream baos = new ByteArrayOutputStream();
		        baos.write(nonceBytes);
		        baos.write(createdDateBytes);
		        baos.write(passwordBytes);
		        
		        byte[] concatenatedBytes = baos.toByteArray();
		        MessageDigest digest = MessageDigest.getInstance("SHA-1");
		        digest.update(concatenatedBytes,0,concatenatedBytes.length);
		        byte[] digestBytes = digest.digest();
		        String digestString = Base64.getEncoder().encodeToString(digestBytes);
		        
		        return digestString;
		    } 
	    	catch (Exception e) {
	        	throw new RuntimeException(e);
	        }

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CreatePasswordDigest";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
